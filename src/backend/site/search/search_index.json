{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sistema de Estoque - Documenta\u00e7\u00e3o","text":""},{"location":"#visao-geral","title":"Vis\u00e3o Geral","text":"<p>Este projeto implementa um sistema completo de gerenciamento de estoque com opera\u00e7\u00f5es CRUD (Create, Read, Update, Delete). A aplica\u00e7\u00e3o \u00e9 dividida em duas partes principais:</p> <ol> <li>Backend: API RESTful desenvolvida com FastAPI</li> <li>Frontend: Interface de usu\u00e1rio constru\u00edda com Streamlit</li> </ol> <p>O sistema \u00e9 containerizado com Docker para facilitar o deployment e garantir consist\u00eancia entre ambientes.</p>"},{"location":"#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<pre><code>src/ \n\u251c\u2500\u2500 frontend/\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 Como_usar.py\n\u2502   \u251c\u2500\u2500 utils.py\n\u2502   \u2514\u2500\u2500 pages/\n\u2502       \u251c\u2500\u2500 01_Criar_Item.py\n\u2502       \u251c\u2500\u2500 02_Visualizar_Itens.py\n\u2502       \u251c\u2500\u2500 03_Buscar_Item.py\n\u2502       \u251c\u2500\u2500 04_Atualizar_Item.py\n\u2502       \u2514\u2500\u2500 05_Deletar_Item.py\n\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u251c\u2500\u2500 utils.py\n\u2502   \u251c\u2500\u2500 API/\n\u2502   \u2502   \u251c\u2500\u2500 crud.py\n\u2502   \u2502   \u2514\u2500\u2500 router.py\n\u2502   \u251c\u2500\u2500 data_contract/\n\u2502   \u2502   \u2514\u2500\u2500 schemas.py\n\u2502   \u2514\u2500\u2500 database/\n\u2502       \u251c\u2500\u2500 database_conf.py\n\u2502       \u2514\u2500\u2500 models.py\n\u2514\u2500\u2500 docker-compose.yml\n</code></pre>"},{"location":"#backend-fastapi","title":"Backend (FastAPI)","text":""},{"location":"#modelos-de-dados","title":"Modelos de Dados","text":"<p>O sistema utiliza SQLAlchemy como ORM para interagir com o banco de dados.</p> <pre><code>class Estoque(Base):\n    __tablename__ = 'Estoque'\n    id_produto: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)\n    nome_produto: Mapped[str] = mapped_column(String())\n    quantidade: Mapped[int] = mapped_column(Integer())\n    marca: Mapped[str] = mapped_column(String())\n    valor: Mapped[float] = mapped_column(Float())\n</code></pre>"},{"location":"#schemas-validacao-de-dados","title":"Schemas (Valida\u00e7\u00e3o de Dados)","text":"<p>Os schemas s\u00e3o definidos usando Pydantic para validar os dados antes de serem processados:</p> <pre><code>class EstoqueBase(BaseModel):\n    nome_produto: str\n    quantidade: PositiveInt\n    marca: str\n    valor: PositiveFloat\n\nclass EstoqueCreate(EstoqueBase):\n    pass\n\nclass EstoqueResponse(EstoqueBase):\n    id_produto: int\n\nclass EstoqueUpdate(EstoqueBase):\n    nome_produto: Optional[str] = None\n    quantidade: Optional[PositiveInt] = None\n    marca: Optional[str] = None\n    valor: Optional[PositiveFloat] = None\n\nclass EstoqueDelete(EstoqueBase):\n    id_produto: int\n</code></pre>"},{"location":"#api-endpoints","title":"API Endpoints","text":"M\u00e9todo Endpoint Descri\u00e7\u00e3o GET /Estoque/ Retorna todos os itens do estoque GET /Estoque/{item_id} Retorna um item espec\u00edfico pelo ID POST /Estoque/ Cria um novo item no estoque PUT /Estoque/{item_id} Atualiza um item existente DELETE /Estoque/{item_id} Remove um item do estoque"},{"location":"#configuracao-do-banco-de-dados","title":"Configura\u00e7\u00e3o do Banco de Dados","text":"<p>A aplica\u00e7\u00e3o usa a classe <code>Config</code> para gerenciar a conex\u00e3o com o banco de dados:</p> <pre><code>class Config:\n    def __init__(self):\n        self.engine = create_engine(Utils.db_url())\n\n    def _start_session(self):\n        return sessionmaker(autocommit=False, autoflush=False, bind=self.engine)\n\n    def engine_creator(self):\n        return self.engine\n\n    def get_db(self):\n        SessionLocal = self._start_session()\n        db = SessionLocal() \n        try:\n            yield db\n        finally:\n            db.close()\n</code></pre> <p>A URL do banco de dados \u00e9 definida em um arquivo <code>.env</code> e acessada atrav\u00e9s da classe <code>Utils</code>.</p>"},{"location":"#frontend-streamlit","title":"Frontend (Streamlit)","text":""},{"location":"#paginas-principais","title":"P\u00e1ginas Principais","text":"<ol> <li>Home (Como_Usar.py): P\u00e1gina inicial com instru\u00e7\u00f5es de uso do sistema</li> <li>Criar Item: Interface para cadastrar novos produtos</li> <li>Visualizar Itens: Lista todos os produtos do estoque</li> <li>Buscar Item: Procura um produto espec\u00edfico pelo ID</li> <li>Atualizar Item: Interface para editar dados de um produto existente</li> <li>Deletar Item: Interface para remover produtos do estoque</li> </ol>"},{"location":"#classe-generica","title":"Classe Gen\u00e9rica","text":"<p>A classe <code>GenericClass</code> implementa m\u00e9todos comuns utilizados em todas as p\u00e1ginas do frontend:</p> <pre><code>class GenericClass:\n    '''Classe com m\u00e9todos uteis e compartilhados pelas p\u00e1ginas'''\n    def __init__(self):\n        st.set_page_config('Inicio', layout=\"wide\", page_icon='\ud83d\udce6')\n\n    def header(self, text):\n        return st.markdown(f\"# {text}\")\n\n    def divider(self):\n        return st.divider()\n\n    # Outros m\u00e9todos...\n</code></pre>"},{"location":"#containerizacao-com-docker","title":"Containeriza\u00e7\u00e3o com Docker","text":""},{"location":"#backend-dockerfile","title":"Backend Dockerfile","text":"<pre><code>FROM python:3.12-slim\n\nWORKDIR /app\n\nRUN pip install poetry\n\nCOPY pyproject.toml poetry.lock* ./\nRUN poetry config virtualenvs.create false\nRUN poetry install --no-root --no-interaction\n\nCOPY main.py ./\nCOPY API/ ./API/\nCOPY data_contract/ ./data_contract\nCOPY database/ ./database/\nCOPY utils.py ./\nCOPY .env ./\n\nEXPOSE 8000\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"#frontend-dockerfile","title":"Frontend Dockerfile","text":"<pre><code>FROM python:3.12-slim\n\nENV PYTHONUNBUFFERED=1 \\\n    POETRY_NO_INTERACTION=1 \\\n    POETRY_VIRTUALENVS_CREATE=false \\\n    PATH=\"/root/.local/bin:$PATH\"\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    build-essential \\\n    curl \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nRUN pip install --upgrade pip \\\n &amp;&amp; pip install poetry\n\nWORKDIR /app\n\nCOPY pyproject.toml poetry.lock* /app/\nRUN poetry install --no-root\n\nCOPY . /app/\n\nEXPOSE 8501\n\nCMD [\"poetry\", \"run\", \"streamlit\", \"run\", \"Como_usar.py\", \"--server.port=8501\", \"--server.address=0.0.0.0\"]\n</code></pre>"},{"location":"#docker-compose","title":"Docker Compose","text":"<pre><code>version: \"3.9\"\n\nservices:\n  fastapi-app:\n    build:\n      context: ./src/backend\n      dockerfile: Dockerfile\n    container_name: fastapi_app\n    ports:\n      - \"8000:8000\"\n    env_file:\n      - ./src/backend/.env\n    volumes:\n      - ./src/backend/API:/app/API\n      - ./src/backend/database:/app/database\n      - ./src/backend/data_contract:/app/data_contract\n      - ./src/backend/utils.py:/app/utils.py\n\n  streamlit-frontend:\n    build:\n      context: ./src/frontend\n      dockerfile: Dockerfile\n    container_name: streamlit_frontend\n    ports:\n      - \"8501:8501\"\n    volumes:\n      - ./src/frontend:/app\n    depends_on:\n      - fastapi-app\n</code></pre>"},{"location":"#ambiente-de-desenvolvimento","title":"Ambiente de Desenvolvimento","text":"<p>O projeto foi desenvolvido usando Python 3.12 e gerenciado com Poetry para controle de depend\u00eancias.</p>"},{"location":"#dependencias-principais-do-backend","title":"Depend\u00eancias principais do Backend:","text":"<ul> <li>FastAPI</li> <li>SQLAlchemy</li> <li>Uvicorn</li> <li>Pydantic</li> <li>Python-dotenv</li> </ul>"},{"location":"#dependencias-principais-do-frontend","title":"Depend\u00eancias principais do Frontend:","text":"<ul> <li>Streamlit</li> <li>Requests</li> <li>Pandas</li> </ul>"},{"location":"#como-usar","title":"Como Usar","text":"<ol> <li>Clone o reposit\u00f3rio</li> <li>Configure o arquivo <code>.env</code> na pasta backend com suas credenciais de banco de dados</li> <li>Execute <code>docker-compose up --build</code> na raiz do projeto</li> <li>Acesse o frontend em <code>http://localhost:8501</code></li> <li>Acesse a documenta\u00e7\u00e3o da API em <code>http://localhost:8000/docs</code></li> </ol>"},{"location":"#operacoes-crud","title":"Opera\u00e7\u00f5es CRUD","text":""},{"location":"#criar-um-item","title":"Criar um Item","text":"<ul> <li>V\u00e1 at\u00e9 a p\u00e1gina \"Criar Item\"</li> <li>Preencha os campos necess\u00e1rios</li> <li>Clique em \"Salvar\"</li> </ul>"},{"location":"#visualizar-itens","title":"Visualizar Itens","text":"<ul> <li>V\u00e1 at\u00e9 a p\u00e1gina \"Visualizar Itens\" para ver todos os produtos</li> <li>Ou v\u00e1 at\u00e9 \"Buscar Item\" para encontrar um produto espec\u00edfico por ID</li> </ul>"},{"location":"#atualizar-um-item","title":"Atualizar um Item","text":"<ul> <li>V\u00e1 at\u00e9 a p\u00e1gina \"Atualizar Item\"</li> <li>Informe o ID do produto</li> <li>Modifique os campos desejados</li> <li>Clique em \"Atualizar\"</li> </ul>"},{"location":"#deletar-um-item","title":"Deletar um Item","text":"<ul> <li>V\u00e1 at\u00e9 a p\u00e1gina \"Deletar Item\"</li> <li>Informe o ID do produto</li> <li>Confirme a exclus\u00e3o</li> </ul>"}]}